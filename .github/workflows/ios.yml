name: iOS starter workflow

on:
  push:
    branches: [ "main-ios" ]
  pull_request:
    branches: [ "main-ios" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest
    env:
        working-directory: ./iOS
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ 'MIIMzgIBAzCCDJUGCSqGSIb3DQEHAaCCDIYEggyCMIIMfjCCBs8GCSqGSIb3DQEHBqCCBsAwgga8AgEAMIIGtQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIaooNKElW+IgCAggAgIIGiOcVjFlW0bJIqwEYW5v6HvSnf/78v4jqh3lB4woCJYvH6VAJIB4ZTENpUEiEUHEfihh/rX4QjZ0VlhTSGB5qgUd/gsZVmCf/c0yzuknU02qUmadvBxr+cf7olNGDu0gE/Ra2HdqPxDRJQbkTIxNepWkvAsTpwFmthrxOWkM9uOX5jcJ+84pKYylD43BYw3b23shsllvct0bBsgBNX9AdpnDNnJzNf8jSP5ny3hOjB9o7PWuOfU8KFJjx44lyma/she9d0oaL7TCXOpLD5V9UeHSChYya/8MDm09o3fuT8E1MOvr8EfocysebuO0D/EbNKBEElZi7STTkWzUwxTLh44XkgNBUBxIO809lXjuOPYo+2vy7J282I63NDs5j0oGKd+3QUVfYMIHgMUZywXSodWcqvTTOA2XZD5L1g9DEagt4iPcVekJjiZ6l05ksmk4cciJlsE5EHgpoydEXhtLbMyNQmnMwSd651QUrMr8mJVlwiuQAS02q2s5nEKF2HiINM1D7N6TPiMjAEKg7CRGq1YAandOhnblAGOHYNdKCdr50NgMhTBPYJfiKUgU2cngKL7WCL4tt1VhqBCFCQVDwNpeOuXBYeJIU5/p7WHVhUIrsWkvUAXvvfKfNM5UO5NaszxTrsemCzJXHk1hMAYdH5td7HTdIRMQ9HJZ5iSLdNwDXQQbLOd0U+9N32TH6Q/KGsY7a/omJcCIeDOeoQLlz4gj30kqSMqpNn6OR2PlsPjq0/XmnQV7vo83kaEn9fAR+qxWgS4PljzArbtqTZLSDrKLFVMDVYLzdXUPlSoseS8KvmFSSYdXLxvDgfC6zYNB++9dZPjR0FM7s2BZcqHBAdXm7P+C2322n31+3/8dh7ePUpNyuPh6Sm7AAG0m6ighJ2aaCNNe/iZBfXWpTVc4Joe6KsfCNOx/oH958uRLpFiYj86ayrIh+HulIfLMrx5h/Ef/uMINAhXgIFog1efqdQYSYSTrUj8L1gXJBGZjCUlqjPwUPatwsbR8Pyf2KLLhIj2oFXyLUSvwtxFhrdjWm8/qPf2pxwzEV1rbL7TslfzuMpyRiCUmwM/Dgbqm40E0FOQj4K4dSIJ4uipF1/qmhYfUE8N7ZjDsoFjQ6y9cjNAC2dvr4Eq1BV8+a0U3vnJatoFzCvpi/alcjBAZZllsDEIki7yQBLfGDGiUfq/VII+N5W/y3OjJcQKew451f4YR0IgnWyFLz47dbYGJJAYbCid9lck7JGDoYnvJEBSRjmxM+992AY2qkJ5JfVT/pH4TY0jZeU/ZDvKWt4ep0nuiYA7eeCaaFw/EkFQqzQzjKCT+lyEEOQ2nsvsa2DTwvA4VauSg5ZdEamIa7fMnjpI5pnRdvhNP53myYyJ6gz5MQotA+DLaof3TE5usjPA8MhZEVm4/xxh/xy61sSyAQxKXWgFxdFH/L36WU6q8Mc8uDeBfZ1irYtQmmy29FlSO094op1Nxw0IGsPhjq5AtGcgS0oSIvJid91dpC8WFs8yzG4H8mjDE3rdseNaIT6nqqFI5a6h2pg8GcVm0tC1nAKjR6UVkZkpVSDpY2lpYHD4oTqNxub5eBe2lsqsiuuZeQPAANYt2pyJgwvuTSf9fAT2WjJaM6ZVO01uYKQfixmDhgorb9ENUcfrhWwzeOTzB5VDwGSAccFq+hVbt08UkLHLI53jd3ItXgdGUPZpyvGiJzDGqoATqwnfETU+OdqU00N/PGwG9H/VmBanhYV0722RwBldLSMnnIrNJzzzDS98PY+FQIwXDeb9MKKy65xjnseZr17Aj4zfrfimUHbW57BeHB4YItCrVYBW/kNrDjXsbo3l6aqt6bficFtyqh4uwIzGZn5vKT67IKcVju5H8y/hNoI9tqr6j5C/GqeTlQmG6g6Aplpn2FYQaguHEh7A5fjjVi7WP65OrPEbqjEqpO1mP0y8+igq8tNXEolee5OkNKQZSBdwKEpllkAuN0bCUuUP4ZAumYmmPAFbxOUVjRg93UFb3sSoAy0XCIYv/+ldXvtfEA5EPzrakemWxSLDSt8SR5tgmHMSOFt8C84qbQDfOqFdjABotjt/k5oe5BEGJZoxen8MU+ym6RLS0pzCsRTAPcoFUxabz/WHizoBHLN1hRpkYAUX9NVz2pivNIF/FOsaHlzC38ImzDK0ZrxSU0DzU9iYywiIaOOG1V/5HMdbs/6q/lWKGVIG5y7IhOqVAbc7snwLtjEiEN9OkwggWnBgkqhkiG9w0BBwGgggWYBIIFlDCCBZAwggWMBgsqhkiG9w0BDAoBAqCCBO4wggTqMBwGCiqGSIb3DQEMAQMwDgQINz+qAvoq2qcCAggABIIEyHqMhJOlrfqDo7VKpeedm5/B7ikqL2ZKVrn2wMtCCN2rnza2z32T7/mO7s/iyYzIvawuj3afB0zWQRjRY2yzNRAd5jTyU1Cy8ZgIPR9TL+5MlYGszFtJ9xxDDpWyjqIyRTgWZG38TJGNXVS9vfl1yAqH/TnV1OvhNaFc2xokWy2QkkS2gnTGIXpUSviVr2eqgQLX6ekY/H4tJ/quqbvA8ZwcIBtQpwUcG2duoWLvdHQVTkBEugB7fl1f6UGyUy27563bgfYWs8SiIiASGMcBQTg/vbB5YeNvni/EDrBVJIQCMnwqozLyvYRLslSt/szqQLAQtpQcafwgdbj9niazWzO6R/T40mwsAEzWXVzU35PyJbXD6FzgPWecpnEmRuDlYlW64SFXnldXy3oAG/WrQw1Hc6RwBjtiMEpSxaKusW8SM7Wv5do8XDnc884JqV4kIOabv5jMGtpGYnOz7kickGfDxP0i9IBYYvKkHmiQn5YaEUvIVU6Djfbp583cyo6NWtTdZoZJCc4L0PtZBpWEwxcJ4EEAGYWQhe4+6aAKjr88niS/iYSgrgaWNg5CQGTDzZTht7qyanoCWmiYbcwLyfkvBLSRgGQL9UJAr6/R19+byK17VN8sqtF8Lc1ECXmb5AncHi4WV7eWNwCFZK3hn4kFQVBKbgF4LxmELY9Y0/bxW9qighR57njqsUyh5fHsZqYJdVoFDrFH7USgdtALA8c2bzl+FEo7b25RrX1GArafXiCItmTqhLP2aOV67GE9kiP6/bBc1we8QI3ghHHnFL7T4naK0PFGJBl3BpyV+PwV8qpmDytbS/LlTx80BJpyiE4Vqfclr42E5Y6Mt/h5YYZp5jDA4aW/RTRZ4m+rr4tPIUFIIQYBSRVRL1ILVvJDyRQf+CNtiLV6Ey6VVgxMbR9UCe6YTHiXd6PrsDRHahy9bwWJV3h7XtuMZ2pqJmvZ2UQIoIrG3LsS1swH/GPkm/SAK07BIu00W6ezS72W3A0UttzF0eGdNfIMNc2elmQJAAoJujlwN73oL7KVnDr1LIGGJWFGfU8OqnsFbD/ByuKKQrEjoOVAY70HekvR3vzPaMKZLUP0wi9KrZOZOCXBevFQbrXswAspCI/bAoslO2nLtawLNytgV3AGMh5bbtQmXFT/YJZ7mDWO5RSAYFyC6KWtrk2MEtIRluL8T71N7HkRht4+zML6w42VpmJFQkKyQD8GZ+m0CbqMRqZDfY4tuVhGGzhIQ1xplgDMsubwpYIElHMk1TPKSG1ehMmRE2E0B7fdTdCJUbYpKNrJDVc7OSA2ZG6N9S+AGU+dv4nApCnlFCYpCJy4f1LkqoQL2mAbGu1ujs7d8XY3Rf9hEwcw4k/zjie2o6R4h8//xMMOb/6I/kJx10t9fnJjlVHa2HdxkIZTDM/0Y78pUatu+TMUbpRX26qat5DbEoYeKsnvetDwkWi8K47YrUafTIiiNHmmA1ez6YoTOwJ1eg9h0z6Z+9Juz2pYrV+/MXW2AMPL3TqUtvhZ/1f9wWKp0vjDId8iPPmfnLwVTZfJp5zMNjI+nw97TeK0bDNilfpupXGrtR6snrP6vTCFZwWREL3IVscdDwBvxS+BJtt8OJfv0rXAVLrSWKVM4cRSqTGBijBjBgkqhkiG9w0BCRQxVh5UAEEAcABwAGwAZQAgAEQAZQB2AGUAbABvAHAAbQBlAG4AdAA6ACAAUwBlAG8AawBoAG8AIABMAGUAZQAgACgAUwBlAG8AawBoAG8AIABMAGUAZQApMCMGCSqGSIb3DQEJFTEWBBTjx1sLKNrgTGnR4IqE9DtemFK10zAwMCEwCQYFKw4DAhoFAAQUxnSAkPlUWIjfH+bau9tYFWGm4AsECL6e67c7CsrlAgEB' }}
          P12_PASSWORD: ${{ 'superuser217' }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ '' }}
          KEYCHAIN_PASSWORD: ${{ 'superuser217' }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        working-directory: ${{env.working-directory}}
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
        working-directory: ${{env.working-directory}}
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
        working-directory: ${{env.working-directory}}
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
        working-directory: ${{env.working-directory}}
